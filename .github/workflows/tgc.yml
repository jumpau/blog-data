name: TC

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'yarn'
        
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ffmpeg chromium-browser
        version: 1.0

    - name: Create and activate venv, install dependencies
      run: |
        set -xe
        python3 -m venv venv
        source venv/bin/activate
        python3 -VV
        pip install telethon
        pip install --upgrade pip
        pip install git+https://github.com/jumpau/TBCCG.git
        yarn global add puppeteer-lottie-cli

    - name: Setup working directory
      run: |
        ls -lah
        echo "Working in main branch, files will be kept locally"
    
    - name: Run tgc
      env:
        tgc_config: ${{ secrets.TGC_CONFIG }}
        PYTHONUNBUFFERED: 1
      run: |
        source venv/bin/activate
        tgc
    
    - name: Zotero Download
      env:
        ZOTERO: ${{ secrets.ZOTERO_USERID }}
      if: "${{ env.ZOTERO != '' }}"
      run: |
        rm -rf zotero.json
        curl -L "https://api.zotero.org/users/${ZOTERO}/publications/items?linkwrap=1&order=date&sort=desc&start=0&include=data&limit=100" --output zotero.json
        ls -lah
        
    - name: Profile Readme Download
      env:
        REPO_NAME: ${{ github.repository }}
      run: |
        echo "$REPO_NAME"
        USER=$(python3 -c "print('${REPO_NAME}'.split('/')[0])")
        echo "$USER"
        rm -rf profile-readme.md
        if ! curl -L "https://raw.githubusercontent.com/${USER}/${USER}/main/README.md" --output profile-readme.md; then
          echo "Failed to download readme."
        fi
        ls -lah
        
    - name: List generated files
      run: |
        echo "Generated files are kept in the current directory:"
        ls -lah
        
    - name: Backup generated files locally
      run: |
        # 创建本地备份目录
        mkdir -p ~/blog-backup/$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR=~/blog-backup/$(date +%Y%m%d_%H%M%S)
        
        # 复制生成的文件到备份目录
        if [ -f atom.xml ]; then cp atom.xml $BACKUP_DIR/; fi
        if [ -f index.html ]; then cp index.html $BACKUP_DIR/; fi
        if [ -f posts.json ]; then cp posts.json $BACKUP_DIR/; fi
        if [ -f rss.xml ]; then cp rss.xml $BACKUP_DIR/; fi
        
        echo "Files backed up to: $BACKUP_DIR"
        ls -lah $BACKUP_DIR
        
    - name: Deploy to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        tgc_config: ${{ secrets.TGC_CONFIG }}
      run: |
        # 安装 toml 解析库
        source venv/bin/activate
        pip install toml
        
        # 使用Python脚本来解析配置并部署
        cat > deploy_script.py << 'EOF'
        import os
        import toml
        import json
        import shutil
        import subprocess
        from pathlib import Path
        
        # 解析TGC配置
        config_str = os.environ.get('tgc_config', '')
        if not config_str:
            print("❌ TGC_CONFIG 为空")
            exit(1)
        
        # 写入临时配置文件
        with open('temp_config.toml', 'w', encoding='utf-8') as f:
            f.write(config_str)
        
        try:
            config = toml.load('temp_config.toml')
            source_dir = ""
            if 'exports' in config and len(config['exports']) > 0:
                source_dir = config['exports'][0].get('path', '')
        except Exception as e:
            print(f"❌ 解析配置失败: {e}")
            source_dir = ""
        
        # 清理临时文件
        if os.path.exists('temp_config.toml'):
            os.remove('temp_config.toml')
        
        if not source_dir:
            print("❌ 无法从配置中获取输出路径，使用默认路径")
            source_dir = "../../../../../../../www/wwwroot/bk.cn"
        
        print(f"📁 使用输出目录: {source_dir}")
        
        # 创建部署目录
        deploy_dir = Path('deploy')
        deploy_dir.mkdir(exist_ok=True)
        
        # 要复制的文件列表
        files_to_copy = ['atom.xml', 'index.html', 'posts.json', 'rss.xml']
        copied_files = []
        
        # 复制文件
        source_path = Path(source_dir)
        print(f"=== 检查源目录: {source_path.absolute()} ===")
        
        if source_path.exists():
            print("✓ 源目录存在")
            for file_name in files_to_copy:
                src_file = source_path / file_name
                dst_file = deploy_dir / file_name
                if src_file.exists():
                    shutil.copy2(src_file, dst_file)
                    print(f"✓ 复制了 {file_name}")
                    copied_files.append(file_name)
                else:
                    print(f"✗ {file_name} 不存在")
        else:
            print("❌ 源目录不存在，尝试查找文件...")
            # 查找文件
            for root, dirs, files in os.walk('.'):
                for file_name in files_to_copy:
                    if file_name in files:
                        src_file = Path(root) / file_name
                        dst_file = deploy_dir / file_name
                        shutil.copy2(src_file, dst_file)
                        print(f"✓ 找到并复制了 {file_name} 从 {src_file}")
                        copied_files.append(file_name)
        
        print(f"=== 部署目录文件列表 ===")
        for item in deploy_dir.iterdir():
            if item.is_file():
                print(f"{item.name} ({item.stat().st_size} bytes)")
        
        if not copied_files:
            print("❌ 没有找到任何文件可以部署！")
            exit(1)
        
        print(f"✅ 准备部署 {len(copied_files)} 个文件: {', '.join(copied_files)}")
        EOF
        
        # 运行部署脚本
        python3 deploy_script.py
        
        # 如果有文件被复制，则创建上传脚本
        if [ -d "deploy" ] && [ "$(ls -A deploy)" ]; then
          echo "=== 创建并运行上传脚本 ==="
          
          # 安装依赖
          npm install form-data
          
          # 创建简化的上传脚本
          cat > upload.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const https = require('https');
        const FormData = require('form-data');
        
        const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
        const projectName = process.env.CLOUDFLARE_PROJECT_NAME;
        const apiToken = process.env.CLOUDFLARE_API_TOKEN;
        
        function uploadToPages() {
          return new Promise((resolve, reject) => {
            const form = new FormData();
            const manifest = {};
            const deployDir = 'deploy';
            
            const files = fs.readdirSync(deployDir);
            console.log('上传文件:', files);
            
            files.forEach(file => {
              const filePath = path.join(deployDir, file);
              const stats = fs.statSync(filePath);
              const hash = require('crypto').createHash('sha1').update(fs.readFileSync(filePath)).digest('hex');
              
              manifest[`/${file}`] = { hash, size: stats.size };
              form.append('file', fs.createReadStream(filePath), { filename: file, filepath: `/${file}` });
            });
            
            form.append('manifest', JSON.stringify(manifest));
            
            const options = {
              hostname: 'api.cloudflare.com',
              path: `/client/v4/accounts/${accountId}/pages/projects/${projectName}/deployments`,
              method: 'POST',
              headers: { 'Authorization': `Bearer ${apiToken}`, ...form.getHeaders() }
            };
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                console.log('Status:', res.statusCode);
                if (res.statusCode === 200 || res.statusCode === 201) {
                  console.log('✅ 部署成功!');
                  resolve(data);
                } else {
                  console.error('❌ 部署失败:', res.statusCode, data);
                  reject(new Error(`Deploy failed: ${res.statusCode}`));
                }
              });
            });
            
            req.on('error', reject);
            form.pipe(req);
          });
        }
        
        uploadToPages().catch(console.error);
        EOF
          
          # 运行上传
          node upload.js
        else
          echo "❌ 没有文件可以部署"
        fi
