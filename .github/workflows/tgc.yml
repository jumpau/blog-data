name: TC

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'yarn'
        
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ffmpeg chromium-browser
        version: 1.0

    - name: Create and activate venv, install dependencies
      run: |
        set -xe
        python3 -m venv venv
        source venv/bin/activate
        python3 -VV
        pip install telethon
        pip install --upgrade pip
        pip install git+https://github.com/jumpau/TBCCG.git
        yarn global add puppeteer-lottie-cli

    - name: Setup working directory
      run: |
        ls -lah
        echo "Working in main branch, files will be kept locally"
    
    - name: Run tgc
      env:
        tgc_config: ${{ secrets.TGC_CONFIG }}
        PYTHONUNBUFFERED: 1
      run: |
        source venv/bin/activate
        tgc
    
    - name: Zotero Download
      env:
        ZOTERO: ${{ secrets.ZOTERO_USERID }}
      if: "${{ env.ZOTERO != '' }}"
      run: |
        rm -rf zotero.json
        curl -L "https://api.zotero.org/users/${ZOTERO}/publications/items?linkwrap=1&order=date&sort=desc&start=0&include=data&limit=100" --output zotero.json
        ls -lah
        
    - name: Profile Readme Download
      env:
        REPO_NAME: ${{ github.repository }}
      run: |
        echo "$REPO_NAME"
        USER=$(python3 -c "print('${REPO_NAME}'.split('/')[0])")
        echo "$USER"
        rm -rf profile-readme.md
        if ! curl -L "https://raw.githubusercontent.com/${USER}/${USER}/main/README.md" --output profile-readme.md; then
          echo "Failed to download readme."
        fi
        ls -lah
        
    - name: List generated files
      run: |
        echo "Generated files are kept in the current directory:"
        ls -lah
        
    - name: Backup generated files locally
      run: |
        # 创建本地备份目录
        mkdir -p ~/blog-backup/$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR=~/blog-backup/$(date +%Y%m%d_%H%M%S)
        
        # 复制生成的文件到备份目录
        if [ -f atom.xml ]; then cp atom.xml $BACKUP_DIR/; fi
        if [ -f index.html ]; then cp index.html $BACKUP_DIR/; fi
        if [ -f posts.json ]; then cp posts.json $BACKUP_DIR/; fi
        if [ -f rss.xml ]; then cp rss.xml $BACKUP_DIR/; fi
        
        echo "Files backed up to: $BACKUP_DIR"
        ls -lah $BACKUP_DIR
        
    - name: Deploy to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
      run: |
        # 创建部署目录
        mkdir -p deploy
        
        # 复制要部署的文件
        if [ -f atom.xml ]; then cp atom.xml deploy/; fi
        if [ -f index.html ]; then cp index.html deploy/; fi
        if [ -f posts.json ]; then cp posts.json deploy/; fi
        if [ -f rss.xml ]; then cp rss.xml deploy/; fi
        
        # 创建上传脚本
        cat > pages-upload.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const https = require('https');
        const FormData = require('form-data');

        const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
        const projectName = process.env.CLOUDFLARE_PROJECT_NAME;
        const apiToken = process.env.CLOUDFLARE_API_TOKEN;

        async function uploadToPages() {
          const form = new FormData();
          
          // 添加文件到表单
          const deployDir = 'deploy';
          const files = fs.readdirSync(deployDir);
          
          files.forEach(file => {
            const filePath = path.join(deployDir, file);
            form.append('file', fs.createReadStream(filePath), file);
          });

          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.cloudflare.com',
              path: `/client/v4/accounts/${accountId}/pages/projects/${projectName}/deployments`,
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${apiToken}`,
                ...form.getHeaders()
              }
            };

            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                if (res.statusCode === 200 || res.statusCode === 201) {
                  console.log('Deploy successful:', JSON.parse(data));
                  resolve(data);
                } else {
                  console.error('Deploy failed:', res.statusCode, data);
                  reject(new Error(`Deploy failed: ${res.statusCode}`));
                }
              });
            });

            req.on('error', reject);
            form.pipe(req);
          });
        }

        uploadToPages().catch(console.error);
        EOF
        
        # 安装 form-data 依赖
        npm install form-data
        
        # 运行上传脚本
        node pages-upload.js
        
        echo "Files deployed to Cloudflare Pages!"
