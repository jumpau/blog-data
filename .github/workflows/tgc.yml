name: TC

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'yarn'
        
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ffmpeg chromium-browser
        version: 1.0

    - name: Create and activate venv, install dependencies
      run: |
        set -xe
        python3 -m venv venv
        source venv/bin/activate
        python3 -VV
        pip install telethon
        pip install --upgrade pip
        pip install git+https://github.com/jumpau/TBCCG.git
        yarn global add puppeteer-lottie-cli

    - name: Setup working directory
      run: |
        ls -lah
        echo "Working in main branch, files will be kept locally"
    
    - name: Run tgc
      env:
        tgc_config: ${{ secrets.TGC_CONFIG }}
        PYTHONUNBUFFERED: 1
      run: |
        source venv/bin/activate
        tgc
    
    - name: Zotero Download
      env:
        ZOTERO: ${{ secrets.ZOTERO_USERID }}
      if: "${{ env.ZOTERO != '' }}"
      run: |
        rm -rf zotero.json
        curl -L "https://api.zotero.org/users/${ZOTERO}/publications/items?linkwrap=1&order=date&sort=desc&start=0&include=data&limit=100" --output zotero.json
        ls -lah
        
    - name: Profile Readme Download
      env:
        REPO_NAME: ${{ github.repository }}
      run: |
        echo "$REPO_NAME"
        USER=$(python3 -c "print('${REPO_NAME}'.split('/')[0])")
        echo "$USER"
        rm -rf profile-readme.md
        if ! curl -L "https://raw.githubusercontent.com/${USER}/${USER}/main/README.md" --output profile-readme.md; then
          echo "Failed to download readme."
        fi
        ls -lah
        
    - name: List generated files
      run: |
        echo "Generated files are kept in the current directory:"
        ls -lah
        
    - name: Deploy to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        tgc_config: ${{ secrets.TGC_CONFIG }}
      run: |
        # 安装 toml 解析库
        source venv/bin/activate
        pip install toml
        
        # 使用Python脚本来解析配置并部署
        cat > deploy_script.py << 'EOF'
        import os
        import toml
        import json
        import shutil
        import subprocess
        from pathlib import Path
        
        # 解析TGC配置
        config_str = os.environ.get('tgc_config', '')
        if not config_str:
            print("❌ TGC_CONFIG 为空")
            exit(1)
        
        # 写入临时配置文件
        with open('temp_config.toml', 'w', encoding='utf-8') as f:
            f.write(config_str)
        
        try:
            config = toml.load('temp_config.toml')
            source_dir = ""
            if 'exports' in config and len(config['exports']) > 0:
                source_dir = config['exports'][0].get('path', '')
        except Exception as e:
            print(f"❌ 解析配置失败: {e}")
            source_dir = ""
        
        # 清理临时文件
        if os.path.exists('temp_config.toml'):
            os.remove('temp_config.toml')
        
        if not source_dir:
            print("❌ 无法从配置中获取输出路径，使用默认路径")
            source_dir = "../../../../../../../www/wwwroot/bk.cn"
        
        print(f"📁 使用输出目录: {source_dir}")
        
        # 直接使用源目录进行部署，不创建deploy副本
        source_path = Path(source_dir)
        print(f"=== 检查源目录: {source_path.absolute()} ===")
        
        # 要检查的文件列表
        files_to_deploy = ['atom.xml', 'index.html', 'posts.json', 'rss.xml']
        available_files = []
        
        if source_path.exists():
            print("✓ 源目录存在")
            for file_name in files_to_deploy:
                src_file = source_path / file_name
                if src_file.exists():
                    print(f"✓ 找到文件 {file_name} ({src_file.stat().st_size} bytes)")
                    available_files.append(file_name)
                else:
                    print(f"✗ {file_name} 不存在")
        else:
            print("❌ 源目录不存在，尝试查找文件...")
            # 查找文件
            for root, dirs, files in os.walk('.'):
                for file_name in files_to_deploy:
                    if file_name in files:
                        src_file = Path(root) / file_name
                        print(f"✓ 找到文件 {file_name} 在 {src_file} ({src_file.stat().st_size} bytes)")
                        available_files.append(file_name)
                        # 更新源目录为找到文件的目录
                        source_path = Path(root)
                        break
        
        if not available_files:
            print("❌ 没有找到任何文件可以部署！")
            exit(1)
        
        print(f"✅ 准备部署 {len(available_files)} 个文件: {', '.join(available_files)}")
        
        # 将源目录路径传递给上传脚本
        with open('source_path.txt', 'w') as f:
            f.write(str(source_path.absolute()))
        
        with open('available_files.json', 'w') as f:
            json.dump(available_files, f)
        EOF
        
        # 运行部署脚本
        python3 deploy_script.py
        
        # 如果找到了文件，则创建上传脚本
        if [ -f "source_path.txt" ] && [ -f "available_files.json" ]; then
          echo "=== 创建并运行上传脚本 ==="
          
          # 安装依赖
          npm install form-data
          
          # 创建直接从源目录上传的脚本
          cat > upload.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const https = require('https');
        const FormData = require('form-data');
        
        const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
        const projectName = process.env.CLOUDFLARE_PROJECT_NAME;
        const apiToken = process.env.CLOUDFLARE_API_TOKEN;
        
        function uploadToPages() {
          return new Promise((resolve, reject) => {
            // 读取源目录路径和可用文件列表
            const sourcePath = fs.readFileSync('source_path.txt', 'utf8').trim();
            const availableFiles = JSON.parse(fs.readFileSync('available_files.json', 'utf8'));
            
            console.log('从源目录上传:', sourcePath);
            console.log('上传文件:', availableFiles);
            
            const form = new FormData();
            const manifest = {};
            
            // 检查是否有真正的 index.html 文件
            let hasRealIndex = availableFiles.includes('index.html');
            
            // 如果没有 index.html，创建一个简单的入口页面
            if (!hasRealIndex) {
              console.log('⚠️  没有找到 index.html，创建一个简单的入口页面');
              const defaultHtml = [
                '<!DOCTYPE html>',
                '<html lang="zh-CN">',
                '<head>',
                '    <meta charset="UTF-8">',
                '    <meta name="viewport" content="width=device-width, initial-scale=1.0">',
                '    <title>Blog</title>',
                '</head>',
                '<body>',
                '    <h1>欢迎访问博客</h1>',
                '    <p>其他文件:</p>',
                '    <ul>',
                availableFiles.map(f => '        <li><a href="/' + f + '">' + f + '</a></li>').join('\n'),
                '    </ul>',
                '</body>',
                '</html>'
              ].join('\n');
              const indexPath = path.join(sourcePath, 'index.html');
              fs.writeFileSync(indexPath, defaultHtml);
              availableFiles.push('index.html');
              console.log('✅ 创建了默认 index.html');
            } else {
              console.log('✅ 使用现有的 index.html 文件');
            }
            
            availableFiles.forEach(file => {
              const filePath = path.join(sourcePath, file);
              const stats = fs.statSync(filePath);
              const hash = require('crypto').createHash('sha1').update(fs.readFileSync(filePath)).digest('hex');
              
              // 确保文件路径以 / 开头，但不要重复
              const webPath = file.startsWith('/') ? file : '/' + file;
              manifest[webPath] = { hash, size: stats.size };
              
              // 设置正确的 MIME 类型
              let contentType = 'text/plain';
              if (file.endsWith('.html')) contentType = 'text/html; charset=utf-8';
              else if (file.endsWith('.xml')) contentType = 'application/xml; charset=utf-8';
              else if (file.endsWith('.json')) contentType = 'application/json; charset=utf-8';
              else if (file.endsWith('.css')) contentType = 'text/css; charset=utf-8';
              else if (file.endsWith('.js')) contentType = 'application/javascript; charset=utf-8';
              
              form.append('file', fs.createReadStream(filePath), { 
                filename: file,
                filepath: webPath,
                contentType: contentType
              });
              
              console.log('📄 ' + file + ': ' + stats.size + ' bytes, hash: ' + hash.substring(0, 8) + '..., type: ' + contentType);
            });
            
            // 添加 _headers 文件来确保正确的 MIME 类型
            const headersLines = [
              '/*',
              '  X-Frame-Options: DENY',
              '  X-XSS-Protection: 1; mode=block',
              '  X-Content-Type-Options: nosniff',
              '  Referrer-Policy: strict-origin-when-cross-origin',
              '',
              '/*.html',
              '  Content-Type: text/html; charset=utf-8',
              '',
              '/*.xml',
              '  Content-Type: application/xml; charset=utf-8',
              '',
              '/*.json',
              '  Content-Type: application/json; charset=utf-8',
              '',
              '/*.css',
              '  Content-Type: text/css; charset=utf-8',
              '',
              '/*.js',
              '  Content-Type: application/javascript; charset=utf-8'
            ];
            const headersContent = headersLines.join('\n');
            
            const headersHash = require('crypto').createHash('sha1').update(headersContent).digest('hex');
            manifest['/_headers'] = { hash: headersHash, size: Buffer.byteLength(headersContent, 'utf8') };
            form.append('file', Buffer.from(headersContent, 'utf8'), { 
              filename: '_headers',
              filepath: '/_headers',
              contentType: 'text/plain'
            });
            console.log('📄 _headers: 添加了 MIME 类型配置');
            
            // 添加 _redirects 文件来处理路由
            const redirectsContent = '# Redirects for Cloudflare Pages\n/*    /index.html   404';
            const redirectsHash = require('crypto').createHash('sha1').update(redirectsContent).digest('hex');
            manifest['/_redirects'] = { hash: redirectsHash, size: Buffer.byteLength(redirectsContent, 'utf8') };
            form.append('file', Buffer.from(redirectsContent, 'utf8'), { 
              filename: '_redirects',
              filepath: '/_redirects',
              contentType: 'text/plain'
            });
            console.log('📄 _redirects: 添加了路由配置');
            
            // 添加必要的部署配置
            const deploymentMetadata = {
              branch: 'main',
              commit_hash: '',
              commit_message: 'Auto deployment from GitHub Actions',
              commit_dirty: 'false'
            };
            
            form.append('manifest', JSON.stringify(manifest));
            
            // 添加部署元数据（确保所有值都是字符串）
            Object.keys(deploymentMetadata).forEach(key => {
              const value = deploymentMetadata[key];
              if (value !== null && value !== undefined && value !== '') {
                const stringValue = String(value);
                form.append(key, stringValue);
                console.log('🔧 添加元数据: ' + key + ' = "' + stringValue + '"');
              }
            });
            
            console.log('📋 Manifest:', JSON.stringify(manifest, null, 2));
            console.log('🔧 部署配置:', deploymentMetadata);
            
            const options = {
              hostname: 'api.cloudflare.com',
              path: '/client/v4/accounts/' + accountId + '/pages/projects/' + projectName + '/deployments',
              method: 'POST',
              headers: { 
                'Authorization': 'Bearer ' + apiToken,
                'User-Agent': 'GitHub-Actions-Deploy/1.0',
                ...form.getHeaders() 
              }
            };
            
            console.log('🚀 发送到生产环境:', 'https://' + options.hostname + options.path);
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                console.log('📊 状态码:', res.statusCode);
                console.log('📋 响应头:', JSON.stringify(res.headers, null, 2));
                
                try {
                  const response = JSON.parse(data);
                  if (res.statusCode === 200 || res.statusCode === 201) {
                    console.log('✅ 部署成功!');
                    console.log('🆔 部署ID:', response.result && response.result.id);
                    console.log('🌍 环境:', response.result && response.result.environment);
                    console.log('🌐 预览URL:', response.result && response.result.url);
                    console.log('🎯 生产URL: https://' + projectName + '.pages.dev');
                    
                    // 输出详细的部署信息
                    if (response.result) {
                      console.log('📦 部署详情:');
                      console.log('  - 阶段:', (response.result.latest_stage && response.result.latest_stage.name) || 'unknown');
                      console.log('  - 状态:', (response.result.latest_stage && response.result.latest_stage.status) || 'unknown');
                      if (response.result.deployment_trigger) {
                        console.log('  - 触发器:', JSON.stringify(response.result.deployment_trigger));
                      }
                      if (response.result.build_config) {
                        console.log('  - 构建配置:', JSON.stringify(response.result.build_config));
                      }
                    }
                    
                    // 如果是预览环境，输出提升到生产环境的信息
                    if (response.result && response.result.environment === 'preview') {
                      console.log('⚠️  当前部署在预览环境，可能需要在 Cloudflare 控制台手动提升到生产环境');
                      console.log('🔗 或者检查项目的生产分支设置');
                    }
                    
                    resolve(data);
                  } else {
                    console.error('❌ 部署失败:', res.statusCode);
                    console.error('📋 完整响应:', data);
                    if (response.errors) {
                      console.error('🚫 错误详情:', JSON.stringify(response.errors, null, 2));
                      // 分析具体错误
                      response.errors.forEach((error, index) => {
                        console.error('错误 ' + (index + 1) + ':', error.message || error);
                        if (error.code) console.error('  错误代码:', error.code);
                      });
                    }
                    reject(new Error('Deploy failed: ' + res.statusCode));
                  }
                } catch (e) {
                  console.error('❌ 解析响应失败:', e.message);
                  console.error('📄 原始响应:', data);
                  reject(e);
                }
              });
            });
            
            req.on('error', (error) => {
              console.error('🚫 请求错误:', error);
              reject(error);
            });
            
            form.pipe(req);
          });
        }
        
        uploadToPages().catch(console.error);
        EOF
          
          # 运行上传
          node upload.js
          
          # 清理临时文件（但保留原文件）
          rm -f source_path.txt available_files.json
          echo "✅ 上传完成，原文件已保留在源目录中"
        else
          echo "❌ 没有文件可以部署"
        fi
        
    - name: Verify files after upload
      run: |
        source venv/bin/activate
        python3 << 'EOF'
        import os
        import toml
        from pathlib import Path
        
        # 重新解析配置获取源目录
        config_str = os.environ.get('tgc_config', '')
        if config_str:
            with open('temp_config.toml', 'w', encoding='utf-8') as f:
                f.write(config_str)
            try:
                config = toml.load('temp_config.toml')
                source_dir = ""
                if 'exports' in config and len(config['exports']) > 0:
                    source_dir = config['exports'][0].get('path', '')
                
                if source_dir:
                    source_path = Path(source_dir)
                    print(f"✅ 验证源目录文件状态: {source_path.absolute()}")
                    files_to_check = ['atom.xml', 'index.html', 'posts.json', 'rss.xml']
                    for file_name in files_to_check:
                        file_path = source_path / file_name
                        if file_path.exists():
                            print(f"✓ {file_name} 仍然存在 ({file_path.stat().st_size} bytes)")
                        else:
                            print(f"✗ {file_name} 不存在")
            except Exception as e:
                print(f"验证时解析配置失败: {e}")
            finally:
                if os.path.exists('temp_config.toml'):
                    os.remove('temp_config.toml')
        EOF
