name: TC

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'yarn'
        
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ffmpeg chromium-browser
        version: 1.0

    - name: Create and activate venv, install dependencies
      run: |
        set -xe
        python3 -m venv venv
        source venv/bin/activate
        python3 -VV
        pip install telethon
        pip install --upgrade pip
        pip install git+https://github.com/jumpau/TBCCH.git
        yarn global add puppeteer-lottie-cli

    - name: Setup working directory
      run: |
        ls -lah
        echo "Working in main branch, files will be kept locally"
    
    - name: Run tgc
      env:
        tgc_config: ${{ secrets.TGC_CONFIG }}
        PYTHONUNBUFFERED: 1
      run: |
        source venv/bin/activate
        tgc
    
    - name: Zotero Download
      env:
        ZOTERO: ${{ secrets.ZOTERO_USERID }}
      if: "${{ env.ZOTERO != '' }}"
      run: |
        rm -rf zotero.json
        curl -L "https://api.zotero.org/users/${ZOTERO}/publications/items?linkwrap=1&order=date&sort=desc&start=0&include=data&limit=100" --output zotero.json
        ls -lah
        
    - name: Profile Readme Download
      env:
        REPO_NAME: ${{ github.repository }}
      run: |
        echo "$REPO_NAME"
        USER=$(python3 -c "print('${REPO_NAME}'.split('/')[0])")
        echo "$USER"
        rm -rf profile-readme.md
        if ! curl -L "https://raw.githubusercontent.com/${USER}/${USER}/main/README.md" --output profile-readme.md; then
          echo "Failed to download readme."
        fi
        ls -lah
        
    - name: List generated files
      run: |
        echo "Generated files are kept in the current directory:"
        ls -lah
        
    - name: Deploy to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        tgc_config: ${{ secrets.TGC_CONFIG }}
      run: |
        # 安装 toml 解析库
        source venv/bin/activate
        pip install toml
        
        # 使用Python脚本来获取文件路径并创建本地部署目录
        cat > deploy_script.py << 'EOF'
        import os
        import toml
        import json
        import shutil
        from pathlib import Path
        
        # 解析TGC配置
        config_str = os.environ.get('tgc_config', '')
        if not config_str:
            print("❌ TGC_CONFIG 为空")
            exit(1)
        
        # 写入临时配置文件
        with open('temp_config.toml', 'w', encoding='utf-8') as f:
            f.write(config_str)
        
        try:
            config = toml.load('temp_config.toml')
            source_dir = ""
            if 'exports' in config and len(config['exports']) > 0:
                source_dir = config['exports'][0].get('path', '')
        except Exception as e:
            print(f"❌ 解析配置失败: {e}")
            source_dir = ""
        
        # 清理临时文件
        if os.path.exists('temp_config.toml'):
            os.remove('temp_config.toml')
        
        if not source_dir:
            print("❌ 无法从配置中获取输出路径，使用默认路径")
            source_dir = "../../../../../../../www/wwwroot/bk.cn"
        
        print(f"📁 使用输出目录: {source_dir}")
        
        # 直接使用源目录进行部署
        source_path = Path(source_dir)
        print(f"=== 检查源目录: {source_path.absolute()} ===")
        
        # 要检查的文件列表
        files_to_deploy = ['atom.xml', 'index.html', 'posts.json', 'rss.xml']
        available_files = []
        
        if source_path.exists():
            print("✓ 源目录存在")
            for file_name in files_to_deploy:
                src_file = source_path / file_name
                if src_file.exists():
                    print(f"✓ 找到文件 {file_name} ({src_file.stat().st_size} bytes)")
                    available_files.append(file_name)
                else:
                    print(f"✗ {file_name} 不存在")
        else:
            print("❌ 源目录不存在，尝试查找文件...")
            # 查找文件
            for root, dirs, files in os.walk('.'):
                for file_name in files_to_deploy:
                    if file_name in files:
                        src_file = Path(root) / file_name
                        print(f"✓ 找到文件 {file_name} 在 {src_file} ({src_file.stat().st_size} bytes)")
                        available_files.append(file_name)
                        # 更新源目录为找到文件的目录
                        source_path = Path(root)
                        break
        
        if not available_files:
            print("❌ 没有找到任何文件可以部署！")
            exit(1)
        
        print(f"✅ 准备部署 {len(available_files)} 个文件: {', '.join(available_files)}")
        
        # 创建本地部署目录
        deploy_dir = Path('./deploy')
        if deploy_dir.exists():
            shutil.rmtree(deploy_dir)
        deploy_dir.mkdir()
        
        # 复制文件到部署目录
        for file_name in available_files:
            src_file = source_path / file_name
            dst_file = deploy_dir / file_name
            shutil.copy2(src_file, dst_file)
            print(f"📄 复制 {file_name} 到部署目录")
        
        print(f"✅ 部署目录准备完成: {deploy_dir.absolute()}")
        EOF
        
        # 运行部署脚本
        python3 deploy_script.py

    - name: Deploy to Cloudflare Pages (Official Action)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        directory: ./deploy
        # 使用 wrangler 部署到生产环境
        wranglerVersion: '3'
        
    - name: Verify files after upload
      run: |
        echo "✅ 部署完成，使用 Cloudflare 官方 Action"
        echo "📁 原文件保留在源目录中"
        ls -la ./deploy
